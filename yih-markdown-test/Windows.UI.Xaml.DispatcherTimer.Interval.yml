items:
- uid: Windows.UI.Xaml.DispatcherTimer
  commentId: T:Windows.UI.Xaml.DispatcherTimer
  id: DispatcherTimer
  parent: Windows.UI.Xaml
  children:
  - Windows.UI.Xaml.DispatcherTimer.#ctor
  - Windows.UI.Xaml.DispatcherTimer.Interval
  - Windows.UI.Xaml.DispatcherTimer.IsEnabled
  - Windows.UI.Xaml.DispatcherTimer.Start
  - Windows.UI.Xaml.DispatcherTimer.Stop
  - Windows.UI.Xaml.DispatcherTimer.Tick
  langs:
  - cpp
  - csharp
  - vb
  name: DispatcherTimer
  nameWithType: DispatcherTimer
  fullName: Windows.UI.Xaml.DispatcherTimer
  type: class
  source:
    remote:
      path: windows.ui.xaml\dispatchertimer.md
      branch: docs
      repo: https://github.com/MicrosoftDocs/winrt-api/blob/
    path: windows.ui.xaml\dispatchertimer.md
    startLine: 0
  namespace: Windows.UI.Xaml
  syntax:
    content.csharp: 'public class DispatcherTimer : IDispatcherTimer'
    content.vb: Public Class DispatcherTimer Implements IDispatcherTimer
    content: 'public class DispatcherTimer : IDispatcherTimer'
  deviceFamilies:
  - Windows 10
  deviceFamiliesVersions:
  - 10.0.10240.0
  apiContracts:
  - Windows.Foundation.UniversalApiContract
  apiContractsVersions:
  - 1.0
  attributes:
  - type: Windows.Foundation.Metadata.ComposableAttribute
  - type: Windows.Foundation.Metadata.ContractVersionAttribute
  - type: Windows.Foundation.Metadata.MarshalingBehaviorAttribute
  - type: Windows.Foundation.Metadata.ThreadingAttribute
  - type: Windows.Foundation.Metadata.WebHostHiddenAttribute
  summary: Provides a timer that is integrated into the **Dispatcher** queue, which is processed at a specified interval of time and at a specified priority.
  remarks: >-
    The @Windows.UI.Xaml.DispatcherTimer?text=DispatcherTimer can be used to run code on the same thread that produces the UI thread. Code running on this thread has the privilege to create and modify objects that can only be created and modified on the UI thread. To specify that code should run on the UI thread, set the @Windows.UI.Xaml.DispatcherTimer.Interval?text=Interval property and then call the @Windows.UI.Xaml.DispatcherTimer.Start?text=Start method. The @Windows.UI.Xaml.DispatcherTimer.Tick?text=Tick event fires after the time specified in @Windows.UI.Xaml.DispatcherTimer.Interval?text=Interval has elapsed. @Windows.UI.Xaml.DispatcherTimer.Tick?text=Tick continues firing at the same @Windows.UI.Xaml.DispatcherTimer.Interval?text=Interval until the @Windows.UI.Xaml.DispatcherTimer.Stop?text=Stop method is called, the app terminates, or the app is suspended (fires @Windows.UI.Xaml.Application.Suspending?text=Suspending ).


    One scenario for @Windows.UI.Xaml.DispatcherTimer?text=DispatcherTimer is to check properties on sensors where changes to the sensor values are not purely event-driven, or the events don't give you the granularity you want. You can see this in the [Accelerometer sample](http://go.microsoft.com/fwlink/p/?linkid=231463).


    Other scenarios for @Windows.UI.Xaml.DispatcherTimer?text=DispatcherTimer include checking for state changes that don't have related events, or for periodic UI updates that can't use a storyboarded animation or a two-way binding.




    > [!TIP]

    > If you're migrating Microsoft Silverlight or Windows Presentation Foundation (WPF) code, the @Windows.UI.Xaml.DispatcherTimer?text=DispatcherTimer and the related **Dispatcher** was in a separate **System.Windows.Threading** namespace. There is no **Windows.UI.Xaml.Threading** namespace in the Windows Runtime, so this class is in @Windows.UI.Xaml?text=Windows.UI.Xaml.


    If you aren't doing anything with the UI thread in your **Tick** handlers and just need a timer, you could also use @Windows.System.Threading.ThreadPoolTimer?text=ThreadPoolTimer instead. Also, for techniques like @Windows.System.Threading.ThreadPoolTimer?text=ThreadPoolTimer or a .NET [Task](https://msdn.microsoft.com/library/system.threading.tasks.task.aspx), you aren't totally isolated from the UI thread. You could still assign to the UI thread asynchronously using @Windows.UI.Core.CoreDispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority,Windows.UI.Core.DispatchedHandler)?text=CoreDispatcher.RunAsync.



    ### Examples



    This example code implements a simple console-style timer that writes data to a @Windows.UI.Xaml.Controls.TextBlock?text=TextBlock named `TimerLog` (XAML that defines `TimerLog` is not shown). The @Windows.UI.Xaml.DispatcherTimer.Interval?text=Interval value is set to 1, and the log displays the actual elapsed time for each @Windows.UI.Xaml.DispatcherTimer.Tick?text=Tick.




    [!code-csharp[1](./windows.ui.xaml/code/DispatcherTimer/csharp/MainPage.xaml.cs#Snippet1)]


    ```cpp


    // .cpp definition, .h not shown

    void MainPage::StartTimerAndRegisterHandler() {
        auto timer = ref new Windows::UI::Xaml::DispatcherTimer();
        TimeSpan ts;
        ts.Duration = 500;
        timer->Interval = ts;
        timer->Start();
        auto registrationtoken = timer->Tick += ref new EventHandler<Object^>(this,&MainPage::OnTick);
    }

    void MainPage::OnTick(Object^ sender, Object^ e) {
        // do something on each tick here ...
    }

    ```
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  modifiers.cpp:
  - public
  - class
- uid: Windows.UI.Xaml.DispatcherTimer.Interval
  commentId: P:Windows.UI.Xaml.DispatcherTimer.Interval
  id: Interval
  parent: Windows.UI.Xaml.DispatcherTimer
  langs:
  - cpp
  - csharp
  - vb
  - javascript
  name: Interval
  nameWithType: Xaml.Interval
  fullName: Windows.UI.Xaml.DispatcherTimer.Interval
  type: property
  source:
    remote:
      path: windows.ui.xaml\dispatchertimer_interval.md
      branch: master
      repo: https://cpubwin.visualstudio.com/DefaultCollection/windows-uwp/_git/winrt-api/
    path: windows.ui.xaml\dispatchertimer_interval.md
    startLine: 0
  assemblies:
  - Windows.UI.Xaml
  namespace: Windows.UI.Xaml
  syntax:
    content.csharp: public TimeSpan Interval { get; set; }
    content.vb: Public ReadWrite Property Interval As TimeSpan
    content: public TimeSpan Interval { get; set; }
    return:
      type: 6a5b79c3
references:
- uid: 6a5b79c3
  name: TimeSpan
  fullname: Windows.Foundation.TimeSpan
  fullname.csharp: System.TimeSpan
  fullname.vb: System.TimeSpan
  spec.cpp:
  - name: TimeSpan
    fullname: Windows.Foundation.TimeSpan
  spec.csharp:
  - name: TimeSpan
    fullName: System.TimeSpan
  spec.vb:
  - name: TimeSpan
    fullName: System.TimeSpan
  spec.javascript:
  - name: TimeSpan
    fullname: Windows.Foundation.TimeSpan
